API Endpoints Documentation
======================

This document provides comprehensive documentation for all available API endpoints in the portfolio backend service. All endpoints follow RESTful conventions and return appropriate HTTP status codes.

1. User Management
-----------------

1.1. Create User
    - Method: POST
    - URL: /users/
    - Description: Registers a new user
    - Request Body:
      {
        "username": "john_doe",
        "email": "john@example.com",
        "password": "securepassword",
        "roles": [1, 2]  // Optional list of role IDs
      }
    - Success Response:
      - Status: 200 OK
      - Body:
        {
          "id": 1,
          "username": "john_doe",
          "email": "john@example.com",
          "roles": [
            {
              "id": 1,
              "name": "user"
            },
            {
              "id": 2,
              "name": "admin"
            }
          ]
        }
    - Error Responses:
      - 400 Bad Request: Username already registered
      - 400 Bad Request: Invalid role IDs

1.2. Read User
    - Method: GET
    - URL: /users/{user_id}
    - Description: Retrieves user details by ID
    - Success Response:
      - Status: 200 OK
      - Body:
        {
          "id": 1,
          "username": "john_doe",
          "email": "john@example.com",
          "roles": [
            {
              "id": 1,
              "name": "user"
            }
          ]
        }
    - Error Response:
      - 404 Not Found: User not found

1.3. List Users
    - Method: GET
    - URL: /users/
    - Query Parameters:
      - skip (optional, default: 0): Number of records to skip
      - limit (optional, default: 100): Maximum number of records to return
    - Success Response:
      - Status: 200 OK
      - Body: Array of user objects
        [
          {
            "id": 1,
            "username": "john_doe",
            "email": "john@example.com",
            "roles": [...]
          },
          ...
        ]

1.4. Update User
    - Method: PUT
    - URL: /users/{user_id}
    - Description: Updates user information
    - Request Body:
      {
        "username": "new_username",  // Optional
        "email": "new_email@example.com",  // Optional
        "roles": [1, 3]  // Optional
      }
    - Success Response:
      - Status: 200 OK
      - Body: Updated user object
    - Error Responses:
      - 404 Not Found: User not found
      - 400 Bad Request: Invalid role IDs

1.5. Change Password
    - Method: POST
    - URL: /users/change-password
    - Description: Changes user password
    - Request Body:
      {
        "username": "john_doe",
        "password": "newpassword",
        "password_confirmation": "newpassword"
      }
    - Success Response:
      - Status: 200 OK
      - Body: Updated user object
    - Error Response:
      - 404 Not Found: Username not found

1.6. Forgot Password
    - Method: POST
    - URL: /users/forgot-password
    - Description: Validates if email exists in system
    - Request Body:
      {
        "email": "john@example.com"
      }
    - Success Response:
      - Status: 200 OK
      - Body: { "detail": "Email is valid" }
    - Error Response:
      - Status: 404 Not Found
      - Body: { "detail": "Email is invalid" }

1.7. Delete User
    - Method: DELETE
    - URL: /users/{user_id}
    - Description: Removes a user from the system
    - Success Response:
      - Status: 200 OK
      - Body: { "detail": "User deleted" }
    - Error Response:
      - 404 Not Found: User not found

2. Role Management
-----------------

2.1. Create Role
    - Method: POST
    - URL: /roles/
    - Description: Creates a new role
    - Request Body:
      {
        "name": "admin",
        "description": "Administrator role"
      }
    - Success Response:
      - Status: 200 OK
      - Body: Created role object
    - Error Response:
      - 400 Bad Request: Role already exists

2.2. Read Role
    - Method: GET
    - URL: /roles/{role_id}
    - Description: Retrieves role details
    - Success Response:
      - Status: 200 OK
      - Body:
        {
          "id": 1,
          "name": "admin",
          "description": "Administrator role"
        }
    - Error Response:
      - 404 Not Found: Role not found

2.3. List Roles
    - Method: GET
    - URL: /roles/
    - Query Parameters:
      - skip (optional, default: 0)
      - limit (optional, default: 100)
    - Success Response:
      - Status: 200 OK
      - Body: Array of role objects

2.4. Delete Role
    - Method: DELETE
    - URL: /roles/{role_id}
    - Description: Removes a role from the system
    - Success Response:
      - Status: 200 OK
      - Body: { "detail": "Role deleted" }
    - Error Response:
      - 404 Not Found: Role not found

3. Email Service
---------------

3.1. Send Email
    - Method: POST
    - URL: /api/email/send
    - Description: Sends an email message
    - Request Body:
      {
        "email": "recipient@example.com",
        "name": "John Doe",
        "subject": "Email Subject",
        "message": "Email message content"
      }
    - Success Response:
      - Status: 200 OK
      - Body: { "detail": "Email sent successfully" }
    - Error Response:
      - Status: 500
      - Body: { "detail": "Failed to send email. Please try again later." }

Usage Notes:
------------
1. All endpoints require appropriate authentication and authorization
2. Responses include appropriate HTTP status codes for success/failure
3. Error responses include descriptive messages in the "detail" field
4. All endpoints are prefixed with /api except where noted otherwise
5. Request/response bodies are in JSON format
6. Dates are in ISO 8601 format
7. IDs are integers